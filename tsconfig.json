{
  /**
   * TypeScript Configuration for Dex Real-Time Messenger
   *
   * This configuration file defines how TypeScript compiles our Next.js 14 application.
   * It's specifically tuned for a modern React/Next.js app with strict type checking,
   * path aliases for clean imports, and optimal development experience.
   *
   * @fileoverview TypeScript compiler configuration for Next.js 14 App Router application
   * @author Dayle Cortes
   * @since 2025
   */
  "compilerOptions": {
    /**
     * JavaScript Target Version
     *
     * ES5 ensures maximum browser compatibility while still allowing modern features
     * through polyfills and Next.js's built-in transpilation. This is crucial for
     * our real-time messaging app that needs to work across different devices and
     * browsers, including older mobile browsers.
     *
     * Why ES5?
     * - Maximum compatibility with older browsers
     * - Next.js handles modern features through Babel/SWC
     * - Ensures our app works on all target devices
     */
    "target": "es5",

    /**
     * Library Files to Include
     *
     * These libraries provide type definitions for different JavaScript environments.
     * Each serves a specific purpose in our Next.js application:
     *
     * - "dom": Browser DOM APIs (document, window, etc.)
     * - "dom.iterable": Iterable DOM collections (NodeList, HTMLCollection)
     * - "esnext": Latest ECMAScript features and APIs
     *
     * This combination gives us access to both browser APIs and modern JavaScript
     * features that our React components and hooks depend on.
     */
    "lib": ["dom", "dom.iterable", "esnext"],

    /**
     * Allow JavaScript Files
     *
     * Enables TypeScript to process .js files alongside .ts/.tsx files. This is
     * essential for our Next.js app because:
     *
     * - Some configuration files (like next.config.js) are JavaScript
     * - Third-party libraries may not have TypeScript definitions
     * - Gradual migration from JavaScript to TypeScript
     * - Compatibility with existing codebases
     */
    "allowJs": true,

    /**
     * Skip Library Type Checking
     *
     * Skips type checking of declaration files (.d.ts files) to improve compilation
     * speed. This is safe for our app because:
     *
     * - We trust our dependencies' type definitions
     * - Significantly faster build times during development
     * - Reduces noise from third-party library type errors
     * - Focuses our attention on our own code's type safety
     */
    "skipLibCheck": true,

    /**
     * Enable Strict Type Checking
     *
     * This is the most important setting for maintaining code quality in our
     * real-time messaging app. Strict mode enables several type checking options:
     *
     * - Strict null checks (prevents null/undefined errors)
     * - Strict function types (ensures function parameter types)
     * - Strict property initialization (catches uninitialized properties)
     * - No implicit any (forces explicit type annotations)
     * - No implicit returns (ensures all code paths return values)
     *
     * Why this matters for our app:
     * - Prevents runtime errors in message handling
     * - Ensures type safety in API routes
     * - Catches authentication state issues early
     * - Makes refactoring safer and more reliable
     */
    "strict": true,

    /**
     * Don't Emit JavaScript Files
     *
     * TypeScript only performs type checking without generating JavaScript output.
     * This is perfect for our Next.js app because:
     *
     * - Next.js handles the actual compilation and bundling
     * - We only need TypeScript for type checking and IntelliSense
     * - Prevents conflicts between TypeScript and Next.js compilation
     * - Faster development builds
     */
    "noEmit": true,

    /**
     * ES Module Interop
     *
     * Enables interoperability between CommonJS and ES modules. This is crucial
     * for our app because:
     *
     * - Many npm packages use CommonJS (like bcrypt, lodash)
     * - Next.js uses ES modules internally
     * - Allows seamless imports from both module systems
     * - Prevents "Module not found" errors
     */
    "esModuleInterop": true,

    /**
     * Module System
     *
     * Uses ES modules (esnext) which is the modern standard and what Next.js
     * expects. This ensures:
     *
     * - Compatibility with Next.js 14's module system
     * - Tree shaking for smaller bundle sizes
     * - Modern JavaScript module features
     * - Better performance in production builds
     */
    "module": "esnext",

    /**
     * Module Resolution Strategy
     *
     * Uses "bundler" resolution which is optimized for modern bundlers like
     * Next.js's webpack. This provides:
     *
     * - Better resolution of node_modules packages
     * - Support for package.json "exports" field
     * - Improved tree shaking capabilities
     * - Faster resolution during development
     */
    "moduleResolution": "bundler",

    /**
     * Allow JSON Module Imports
     *
     * Enables importing JSON files as modules. This is useful for our app when:
     *
     * - Importing configuration files
     * - Loading static data
     * - Working with package.json in build scripts
     * - Importing translation files or constants
     */
    "resolveJsonModule": true,

    /**
     * Isolated Modules
     *
     * Ensures each file can be safely transpiled without relying on other files.
     * This is essential for our Next.js app because:
     *
     * - Next.js can transpile files independently
     * - Enables faster builds and better caching
     * - Required for certain Next.js optimizations
     * - Prevents circular dependency issues
     */
    "isolatedModules": true,

    /**
     * JSX Handling
     *
     * Preserves JSX syntax for Next.js to handle. This is crucial because:
     *
     * - Next.js uses its own JSX transform (React 17+ automatic runtime)
     * - We don't want TypeScript to transform JSX
     * - Enables Next.js optimizations like automatic JSX runtime
     * - Maintains compatibility with Next.js 14's JSX handling
     */
    "jsx": "preserve",

    /**
     * Incremental Compilation
     *
     * Enables incremental compilation for faster subsequent builds. This is
     * especially important for our real-time messaging app because:
     *
     * - Faster development feedback loops
     * - Only recompiles changed files
     * - Reduces build times during development
     * - Enables faster hot reloading
     */
    "incremental": true,

    /**
     * TypeScript Plugins
     *
     * Configures plugins that extend TypeScript's functionality. The "next" plugin
     * provides Next.js-specific type checking and optimizations.
     */
    "plugins": [
      {
        /**
         * Next.js TypeScript Plugin
         *
         * Provides Next.js-specific type checking and optimizations:
         * - Validates Next.js API routes
         * - Checks page component exports
         * - Validates metadata exports
         * - Provides better error messages for Next.js patterns
         */
        "name": "next"
      }
    ],

    /**
     * Path Mapping for Clean Imports
     *
     * Defines path aliases to avoid relative import hell. The "@/*" alias maps
     * to the project root, enabling clean imports like:
     *
     * Instead of: import Button from '../../../components/Button'
     * We can use: import Button from '@/app/components/Button'
     *
     * This is extensively used throughout our app for:
     * - Component imports (e.g., @/app/components/Avatar)
     * - Utility imports (e.g., @/app/libs/prismadb)
     * - Type imports (e.g., @/app/types)
     * - Hook imports (e.g., @/app/hooks/useConversation)
     *
     * Benefits:
     * - Cleaner, more readable imports
     * - Easier refactoring (no relative path updates)
     * - Consistent import patterns across the codebase
     * - Better IDE support and autocomplete
     */
    "paths": {
      "@/*": ["./*"]
    }
  },

  /**
   * Files to Include in TypeScript Compilation
   *
   * Specifies which files TypeScript should process. This ensures our entire
   * Next.js application is type-checked properly.
   */
  "include": [
    /**
     * Next.js Type Definitions
     *
     * Provides TypeScript definitions for Next.js-specific features like
     * getServerSideProps, getStaticProps, and Next.js API routes.
     */
    "next-env.d.ts",

    /**
     * All TypeScript Files
     *
     * Includes all .ts and .tsx files in the project, covering:
     * - React components (.tsx)
     * - Utility functions (.ts)
     * - Type definitions (.ts)
     * - Configuration files (.ts)
     */
    "**/*.ts",
    "**/*.tsx",

    /**
     * Next.js Generated Types
     *
     * Includes Next.js's generated type definitions for:
     * - Route types
     * - API route types
     * - Page component types
     * - Layout component types
     */
    ".next/types/**/*.ts"
  ],

  /**
   * Files to Exclude from TypeScript Compilation
   *
   * Excludes files that don't need type checking to improve performance.
   */
  "exclude": [
    /**
     * Node Modules
     *
     * Excludes all node_modules dependencies since they have their own
     * type definitions and don't need to be type-checked by our project.
     * This significantly improves compilation speed.
     */
    "node_modules"
  ]
}
